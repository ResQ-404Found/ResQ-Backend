diff a/app/handlers/post_handler.py b/app/handlers/post_handler.py	(rejected hunks)
@@ -8,8 +8,6 @@
 from app.handlers.user_handler import get_current_user
 from app.schemas.post_schemas import PostCreate, PostUpdate, PostRead
 from app.services.post_service import PostService
-from uuid import uuid4
-import os
 
 router = APIRouter()
 
@@ -22,29 +20,14 @@
     current_user: User = Depends(get_current_user),
     session: Session = Depends(get_db_session)
 ):
-    # 1. 파일 저장 및 URL 생성
-    image_urls = []
-    if files:
-        os.makedirs("static/uploads", exist_ok=True)
-        for file in files:
-            filename = f"{uuid4().hex}_{file.filename}"
-            file_path = os.path.join("static/uploads", filename)
-            with open(file_path, "wb") as f:
-                f.write(await file.read())
-            # 실제 서비스라면 URL 포맷에 맞춰서 변경
-            image_urls.append(f"/static/uploads/{filename}")
-
-    # 2. post 생성
+    
     post_data = PostCreate(
         title=title,
         content=content,
         region_id=region_id,
-        post_imageURLs=image_urls if image_urls else None
     )
     service = PostService(session)
-    post = service.create_post(post_data, current_user.id, image_urls)
-    return service.to_read_dto(post)
-
+    return await service.create_post(post_data, current_user.id, files)
 
 @router.get("/posts", response_model=List[PostRead])
 def read_posts(
@@ -57,8 +40,7 @@
     if region:
         region_ids = session.exec(select(Region.id).where(Region.sido == region)).all()
     service = PostService(session)
-    posts = service.list_posts(term=term, region_ids=region_ids, sort=sort)
-    return [service.to_read_dto(post) for post in posts]
+    return service.list_posts(term=term, region_ids=region_ids, sort=sort)
 
 @router.get("/posts/me", response_model=List[PostRead])
 def read_my_posts(
@@ -66,46 +48,32 @@
     session: Session = Depends(get_db_session)
 ):
     service = PostService(session)
-    posts = service.list_user_posts(current_user.id)
-    return [service.to_read_dto(post) for post in posts]
+    return service.list_user_posts(current_user.id)
 
 @router.get("/posts/{post_id}", response_model=PostRead)
 def read_post(post_id: int, session: Session = Depends(get_db_session)):
     service = PostService(session)
-    post = service.increment_view_count(post_id)
-    return service.to_read_dto(post)
+    return service.increment_view_count(post_id)
 
 @router.patch("/posts/{post_id}", response_model=PostRead)
 async def update_post(
     post_id: int,
-    title: Optional[str] = Form(None),
+    title: Optional[str] = Form(None),  
     content: Optional[str] = Form(None),
     region_id: Optional[int] = Form(None),
-    post_imageURLs: Optional[List[UploadFile]] = File(None),  # ← 여기 변경됨
+    post_imageURLs: Optional[List[str]] = Form(None),
+    files: Optional[List[UploadFile]] = File(None),
     current_user: User = Depends(get_current_user),
     session: Session = Depends(get_db_session)
 ):
-    # 이미지 저장
-    image_urls = []
-    if post_imageURLs:
-        os.makedirs("static/uploads", exist_ok=True)
-        for file in post_imageURLs:
-            filename = f"{uuid4().hex}_{file.filename}"
-            file_path = os.path.join("static/uploads", filename)
-            with open(file_path, "wb") as f:
-                f.write(await file.read())
-            image_urls.append(f"/static/uploads/{filename}")
-
-    # 업데이트용 데이터 생성
     post_data = PostUpdate(
-        title=title,
-        content=content,
-        region_id=region_id
+        title=title or None,
+        content=content or None,
+        region_id=region_id,
+        post_imageURLs = [url for url in post_imageURLs or [] if url] or None
     )
-
     service = PostService(session)
-    post = service.update_post(post_id, post_data, current_user.id, new_image_urls=image_urls)
-    return service.to_read_dto(post)
+    return await service.update_post(post_id, post_data, current_user.id, files)
 
 @router.delete("/posts/{post_id}")
 def delete_post(
